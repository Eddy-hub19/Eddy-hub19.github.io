// - створити функцію яка виводить масив

// let people = ['Arsen', 'Roma', 'Oleg'];

// function array() {
//     console.log(people);
// }
// array();

// let array = [1, 2, 3, 4, 5, 6, 7];

// function printArray(arr) {
//     console.log(arr);
//     for (const arrElement of arr) {
//         console.log(arrElement);
//     }
// }
// printArray(array);

// // - створити функцію яка заповнює масив рандомними числами та виводить його. Для виведення використати попвередню функцію.

// function createArray(length, min, max) {
//     // debugger
//     let arrayRandom = [];
//     for (let i = 0; i < length; i++) {
//         arrayRandom.push(Math.floor(Math.random() * (max - min) + min));
//     }
//     return arrayRandom;
// }
// const array1 = createArray(10, 10, 100);
// printArray(array1)

// - створити функцію яка приймає три числа та виводить та повертає найменьше.

// function returnMinFromThree(a, b, c) {
//     let min;
//     let max;
//     if (a <= b && a <= c) min = a;
//     if (b <= a && b <= c) min = b;
//     if (c <= b && c <= a) min = c;
//     console.log('min');
//     return min;
// }
// const mathMin = returnMinFromThree(31, 10, -10);
// console.log(mathMin);


// - створити функцію яка приймає три числа та виводить та повертає найбільше.

// function returnMaxFromThree(a, b, c) {
//     if (a >= b && a >= c) max = a;
//     if (b >= a && b >= c) max = b;
//     if (c >= b && c >= a) max = c;
//     console.log('max');
//     return max;
// }
// const mathMax = returnMaxFromThree(90, 100, 50);
// console.log(mathMax);

// - створити функцію яка приймає будь-яку кількість чисел, повертає найменьше, а виводить найбільше

// function returnMinPrintMax() {
//     // console.log(arguments); // аргумент,який можна ітерувати,як масив
//     let min = arguments[0]
//     let max = arguments[0]
//     for (const item of arguments) {
//         if (item > max) max = item;
//         if (item < min) min = item;
//     }
//     console.log('max', max);
//     return min
// }
// const min = returnMinPrintMax(10, 2, 3, 4, 5, 6);
// console.log('----------------');
// console.log('min', min);
// - створити функцію яка виводить масив

// let users = ['Audi', 'Reno', 'Masda'];

// function array() {
//     console.log(users);
// }
// array();

// - створити функцію яка повертає найбільше число з масиву


// const myFunc = (array) => {
//     let max = array[0];
//     for (const item of array) {
//         if (max < item) max = item
//     }
//     return max;
// }
// const myFunc1 = myFunc([1, 2, 3, 4, 5])
// console.log(myFunc1);

// - створити функцію яка повертає найменьше число з масиву

// const myFunc = (array) => {
//     let max = array[0];
//     for (const item of array) {
//         if (max > item) max = item
//     }
//     return max;
// }
// const myFunc1 = myFunc([1, 2, 3, 4, 5])
// console.log(myFunc1);

// - створити функцію яка приймає масив чисел та складає значення елементів масиву та повертає його.

// function average(array) {
//     let sum = 0
//     for (const item of array) {
//         sum += item;
//     }
//     return sum / array.lenght;
// }
// const average1 = average([2, 2, 2, 2])
// console.log('average1', average1);

// - створити функцію яка приймає масив чисел та повертає середнє арифметичне його значень.



// - Створити функцію яка приймає масив будь яких объектів, та повертає значення кількості об'єктів в масиві
// - Створити функцію яка приймає масив будь яких объектів, та повертає загальн кількість полів в них
// - створити функцію  яка скаладає значення елементів з однаковими індексами  та повертає новий результуючий масив.
//   Приклад
//   [1,2,3,4]
//   [2,3,4,5]
//   результат
//   [3,5,7,9]
// - *** приймає масив та число "i", та міняє місцями об`єкт який знаходиться в індексі "i" на "i+1"
// - *** створити функцію яка буде переносити елементи з значенням 0 у кінець маисву. Зберігаючи при цьому порядок не нульових значень.
// Двожина масиву від 2 до 100
// Приклад
// [1,0,6,0,3] => [1,6,3,0,0]
// [0,1,2,3,4] => [1,2,3,4,0]
// [0,0,1,0]   => [1,0,0,0]

// Створити функцію яка :
// - Додає в боді блок з текстом "Hello owu"
// - Додає в боді елемент з текстом . Тип елементу та текст отримати через аргументи
// - приймає масив автомобілів (можна взяти з попередніх дз ),та  індентифікатор елемнту в який потрібно додати список цих автомобілів.
// Для кожного автомобіля створити свій блок, та додати його в елемент, індентифікатор якого ви отримали. Всі властивості авто в обному блоці
// - приймає масив автомобілів (можна взяти з попередніх дз ),та  індентифікатор елемнту в який потрібно додати список цих автомобілів.
// Для кожного автомобіля створити свій блок, та додати його в елемент, індентифікатор якого ви отримали.
// Для кожної властивості створити всередені блока автомоблія свій блок

// (на основі минулого ДЗ)
// **- функція приймає 2 масиви з рівною кількістю об'єктів та з'єднює в один об'єкт користувача та місто з відповідними "id" та "user_id",
// та повертає масив цих з'єднаних об'єктів.
// Приклад масивів:
//             let usersWithId = [{id: 1, name: 'vasya', age: 31, status: false}, {id: 2, name: 'petya', age: 30, status: true}, {id: 3, name: 'kolya', age: 29, status: true}, {id: 4, name: 'olya', age: 28, status: false},];
//             let citiesWithId = [{user_id: 3, country: 'USA', city: 'Portland'}, {user_id: 1, country: 'Ukraine', city: 'Ternopil'}, {user_id: 2, country: 'Poland', city: 'Krakow'}, {user_id: 4, country: 'USA', city: 'Miami'},];
// Частковий приклад реультату:



// ***- беремо завдання з правилами з укроку №3 :
// Та робимо це функцією.При цьому правила отримувати через аргумент.
// "Є масив котрий характеризує правила. Створити скрипт який ітерує цей масив, та робить з кожне правило в окремому блоці.
// При цому в блоці, номер правила записати в свій блок, текст правила записати в свій окремий блок.
// Результатом відпрацювання скріпта повинна бути структура яка міститься в блоці wrap файла rule.html

// 			let rules = [
// 				{
// 					title: 'Первое правило Бойцовского клуба.',
// 					body: 'Никому не рассказывать о Бойцовском клубе.'
// 				},
// 				{
// 					title: 'Второе правило Бойцовского клуба.',
// 					body: 'Никогда никому не рассказывать о Бойцовском клубе.'
// 				},
// 				{
// 					title: 'Третье правило Бойцовского клуба.',
// 					body: 'В схватке участвуют только двое.'
// 				},
// 				{
// 					title: 'Четвертое правило Бойцовского клуба.',
// 					body: 'Не более одного поединка за один раз.'
// 				},
// 				{
// 					title: 'Пятое правило Бойцовского клуба.',
// 					body: 'Бойцы сражаются без обуви и голые по пояс.'
// 				},
// 				{
// 					title: 'Шестое правило Бойцовского клуба.',
// 					body: 'Поединок продолжается столько, сколько потребуется.'
// 				},
// 				{
// 					title: 'Седьмое правило Бойцовского клуба.',
// 					body: 'Если противник потерял сознание или делает вид, что потерял, или говорит «Хватит» — поединок окончен.'
// 				},
// 				{
// 					title: 'Восьмое и последнее правило Бойцовского клуба.',
// 					body: 'Новичок обязан принять бой.'
// 				},

// 			];
// "