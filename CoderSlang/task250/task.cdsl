{
  "jsLectureId": 25,
  "reward": 30,
  "tutors": [
    "Sigma"
  ],
  "runAs": "node",
  "i18n": {
    "en": {
      "title": "Gold Mine",
      "description": [
        "Hey, Hero! This is your first task that consists of multiple stages.",
        "You'll be submitting your solution multiple times implementing a smaller piece of the big task.",
        "Be mindful not to break what was already working on previous stages.",
        "",
        "The goal is to implement the gold mining game.",
        "Initially, you'll be able to produce gold by clicking the `G` key on the keyboard.",
        "Later on, you'll be able to purchase producers that mine gold automatically.",
        "",
        "Reach out to us if you feel stuck and think there's an issue with the testing engine.",
        "",
        "LET'S GO!"
      ],
      "final": [
        "Congratulations, Hero! It's been a tough road, but you've made it!",
        "",
        "You can make a number of improvements to the game. In example, make `formatNumber` handle numbers",
        "greater than 999.99T. Next could be something like `aa`, `ab`, `ac` and so on.",
        "You could improve the UI, add extra producers, make the game easier or harder by changing the producer stats.",
        "",
        "There are multiple ways to reach out to us.",
        "Email: welcome@coderslang.com",
        "Telegram: t.me/coderslang",
        "Twitter: @coderslang",
        "",
        "We're looking forward to your feedback or suggestions!"
      ],
      "stages": {
        "1": [
          "This is your first subtask or rather the stage 1 of the task.",
          "",
          "You're starting with the empty solution.js file.",
          "- Create a new file `gameEngine.js` and export an empty function `startMiningGame` from it.",
          "- Import the function `startMiningGame` into `solution.js`.",
          "- Call the function `startMiningGame` after importing it into `solution.js`.",
          "",
          "Nothing should happen as the function is empty. It's ok."
        ],
        "2": [
          "Our game should interact with the user in 2 ways. It should know how to accept the keyboard input,",
          "and it should know how to print messages to the console.",
          "",
          "You're already familiar with console.log, but this time I suggest using an **npm** module `terminal-kit`.",
          "It will provide us with all we need for the task, plus a couple of very handy utility functions that will",
          "allow us to change our position on the screen, clear the screen and handle user input.",
          "",
          "- Start by installing it by running `npm install --save terminal-kit` in the terminal.",
          "- Create a new file constants.js and place the line `import terminalKit from 'terminal-kit';` in it.",
          "- After importing the module, add the line `export const term = terminalKit.terminal;`."
        ],
        "3": [
          "So, you've already exported the constant `term` that will allow us to control the terminal.",
          "Let's make some use of it!",
          "",
          "- Create the file `functions.js` and export the function `init` from it.",
          "- Function `init` should have a single parameter `term`.",
          "- Import the function `init` into `gameEngine.js` and call it from the function `startMiningGame`.",
          "- Add the parameter `term` to the function `startMiningGame`.",
          "- Import the constant `term` into `solution.js` from `constants.js`, pass it into `startMiningGame` and then into `init`.",
          "- Inside of the `init` function, add the line `term('Welcome to the mining game!')`.",
          "",
          "As a result, you should see the message `Welcome to the mining game!` printed on the screen",
          "P.S. `term` should ONLY be imported into `solution.js`."
        ],
        "4": [
          "Congratulations on passing the stage 3!",
          "You might be wondering why we have 4 files, a third party module and quite a few lines of code to output",
          "a single message on the screen... And the answer is that this structure will allow our code to be flexible,",
          "easy to modify and maintain. Ultimately the payoff will be evident.",
          "",
          "Before we can let our user mine gold, we need a place to store it.",
          "- Let's create an object `config` with the single property `gold` with the value 0.",
          "- Export `config` from the `constants.js`, import it into `solution.js` and pass into `startMiningGame`",
          "as a second parameter."
        ],
        "5": [
          "Now, let's work on the function that will be called if the user clicks the key `G` on the keyboard.",
          "",
          "Implement and export the function `handleKeyPress(term, state)` in the `handlers.js`.",
          "For the reasons that you'll understand in the next task, we need to make it a closure. In other words",
          "`handleKeyPress(term, state)` should return another function with 3 parameters (name, matches, data).",
          "",
          "We're only interested in the key that was pressed, and it's stored as a code in the field `data.code`",
          "You can use `String.fromCharCode()` to convert the code of the key into the actual symbol.",
          "If the key is equal to `G` or `g` it should increment the property `gold`",
          "of the parameter `state` by 1.",
          "P.S. Remember that we import `term` and `config` only into `solution.js` and then forward it as `term` and `state`.",
          "The names of these internal parameters could be chosen differently, it's the structure that very important here."
        ],
        "6": [
          "The handler is ready, so we need to connect it with the keypress event.",
          "",
          "But before that we need to improve the `init` function. It accepts a single parameter and should call on it:",
          "- clear()",
          "- hideCursor()",
          "- grabInput()",
          "The function names are self-explanatory and will help us start working with keyboard events.",
          "",
          "Inside of the `startMiningGame`, after calling `init`, call the function `term.on('event', handler)`.",
          "This function accepts 2 parameters. The first one is a string. As we want to handle keyboard events,",
          "we'll set it to `'key'`.",
          "",
          "The second one is a callback function which has 3 parameters `(name, matches, data)`.",
          "We've already implemented the appropriate closure on the previous stage. Time to use it!"
        ],
        "7": [
          "So, now we can start mining gold in manual mode by pressing key 'G' key.",
          "Let's print the result of our actions on the screen.",
          "",
          "Implement and export the function `updateGold(term, state)` from `functions.js`",
          "It should move to the coordinates (25, 2), erase everything that comes after it and then print the property",
          "`state.gold` in yellow color and bold font followed by 3 spaces.",
          "",
          "Once you've implemented `updateGold`, you can call it from `handleKeyPress` and update the gold value when",
          "the user hits the 'G' key.",
          "",
          "P.S. Use functions term.moveTo(x, y), term.bold.yellow(message) and term.eraseLineAfter()"
        ],
        "8": [
          "Great! The manual mode is done, so we should think about automating our mining empire.",
          "",
          "Add a new field `producers` into the `config` constant that was exported from `solution.js`.",
          "It should be an array of objects. Each element of the array `producers` (each producer)",
          "should have properties `id`, `title`, `cost`, `growthRate`, `baseProduction` and `count`.",
          "Here's are examples of what producers might look like:",
          "`{ id: 1, title: 'Miner', cost: 10, growthRate: 1.13, baseProduction: 0.1, count: 0 }`",
          "`{ id: 2, title: 'Adventurer', cost: 100, growthRate: 1.17, baseProduction: 1, count: 0 }`",
          "`{ id: 3, title: 'Professional', cost: 1200, growthRate: 1.14, baseProduction: 9, count: 0 }`",
          "Each producer must have a unique ID"
        ],
        "9": [
          "Now let's add the ability for the user to purchase new producers.",
          "If you've created producers with single digit ids, you did everything right. If not, you can still fix it.",
          "",
          "In this task you should only modify the `handleKeyPress` function.",
          "",
          "If user presses the key that corresponds to the id of a producer and they have enough gold to by it, then",
          "we should:",
          "- Deduct the cost of the producer from the gold balance",
          "- Increase the cost of the next producer by multiplying the current cost by the growthRate",
          "- Increment the count of the producer that was purchased"
        ],
        "10": [
          "After implementing a producer purchase we need to make sure they do the work!",
          "Each second the producer should give us the amount of gold equal to their `baseProduction`.",
          "",
          "- Add a new field `productionRate` to the config object exported from `constants.js`.",
          "- Initial value of `productionRate` should equal to 0.",
          "- When the user purchases a new producer, we should increase the global `productionRate`",
          "- Implement and export a handler `handleStateChange(term, state)` in `handlers.js` that should call a function `updateGold(term, state)`",
          "- In the `updateGold` function, increment the value of gold by productionRate each time it's called",
          "- In `startMiningGame` set the interval that will call `handleStateChange` once every second",
          "- `handleStateChange` should be a closure and return a function in order to be used in `setInterval`",
          "- Remove the call to `updateGold` from the `handleKeyPress` to avoid accounting issues"
        ],
        "11": [
          "The core of our mining game is implemented now.",
          "However, there are a few cosmetic things that we need to work on to provide a pleasant user experience.",
          "",
          "For starters, we'll improve our config by adding two flags `isInitCompleted: false` and `isProducerListUpdated: true`",
          "You'll need them in the upcoming stages."
        ],
        "12": [
          "The prep is done, so let's start from the beginning.",
          "Once the user has enough gold to purchase the first producer, it makes sense to change the welcome message.",
          "I suggest creating a function `checkInitCompleted` that should be called from `handleKeyPress` once the user has enough gold to purchase the first producer.",
          "",
          "Here's how `checkInitCompleted` should work:",
          "- It should accept forwarded arguments `term` and `state`.",
          "- It should move to the beginning of the first line, erase it and print the message `You can purchase producers by clicking the number button (1, 2, 3, ...)`",
          "- It should print the messages `GOLD:` and `PRODUCTION RATE:` on lines 2 and 3 respectively.",
          "- It should be called from `handleKeyPress` if the user has enough gold to purchase first producer.",
          "",
          "Don't forget that the transition from the initial welcome message should happen only once.",
          "Even though the function `handleKeyPress` could be called multiple time, `checkInitCompleted` should only be called once."
        ],
        "13": [
          "Next, we're going to improve the UX by displaying the current list of producers.",
          "We'll implement the function `updateProducerList(term, state)` in `functions.js`",
          "",
          "- It should print the list of producers, each on the new line starting from line 5.",
          "- It should only print the producers where the `count` is greater than 0, plus one producer with the 0 count, to show the user what's their next objective.",
          "- The output format should be like this: ",
          "`Miner: 2 | Production per second: 0.1 | Cost: 12.8`",
          "`Adventurer: 0 | Production per second: 1.0 | Cost: 100`",
          "- Production per second and cost should be rounded to a one digit after the decimal point.",
          "",
          "`updateProducerList` should be called from `handleKeyPress` every time there's a need for it.",
          "Good examples might be the transition from the initial welcome message in `checkInitCompleted` or a purchase of a new producer."
        ],
        "14": [
          "Wow! The previous stages must have been hard. We still have some work to do, though.",
          "",
          "It'd be very useful for the user to see the current production rate of their mining empire.",
          "Let's display it on the third line in green color (term.green()). Right under the current amount of gold.",
          "As we need to update this number only when we purchase the new producer, you can add the necessary code into `handleKeyPress`"
        ],
        "15": [
          "You might have noticed, that there are occasional issues with displaying the numbers in our game.",
          "Sometimes, there appear long weird tails after the decimal point.",
          "The other times the numbers get so big that it's hard to make sense of them.",
          "",
          "Let's implement the function `formatNumber(n)` in `functions.js` that should take the number and return a string representing an improved versions of it.",
          "Here's how it should work: ",
          "- If `n < 1000`, it should be rounded to a single digit after a decimal point",
          "- Else, to cut down the length of a number, we need to use letters 'K', 'M', 'B', 'T' to represent",
          "thousands, millions, billions or trillions. We're not really interested in being super precise here.",
          "So we'll then round the result to two digits after a decimal point.",
          "Examples: 12352.1 => 12.35K, 1234321 => 1.23M, 12343210000000 => 12.34T",
          "",
          "Change the output format of GOLD and PRODUCTION RATE using the `formatNumber`.",
          "You can include it into other places like the list of producers, although it's not mandatory."
        ],
        "16": [
          "At the moment, we're updating the UI once a second. It's ok, but it'd be a lot smoother if it was updating",
          "more often. Let's say 10 times faster.",
          "",
          "You'll need to change the code in quite a few places, ",
          "so let's add a property `tickSpeed` to our `config` object to make the transition to a different refresh rate smooth and easy.",
          "Start by passing `tickSpeed` as as second parameter to `setInterval` and then think about what should you do next.",
          "",
          "Remember, that you should also account for a `tickSpeed` change in the amount of gold you add to the bank on each tick."
        ]
      }
    },
    "ru": {
      "title": "Золотая Шахта",
      "description": [
        "Привет, Герой! Это твоя первая задача, которая состоит из нескольких этапов.",
        "Ты будешь отправлять решение на проверку несколько раз, реализуя отдельные фичи в каждой подзадаче.",
        "Будь аккуратен, чтобы не сломать то, что было сделано на предыдущих этапах.",
        "",
        "Цель - написать игру в которой пользователь сможет построить золотодобывающую империю.",
        "В самом начале, копать придется вручную, нажимая кнопку `G` на клавиатуре.",
        "Далее, ты сможешь купить производителей, которые будут добывать золото автоматически.",
        "",
        "Пиши нам, если на каком-то этапе ты застрянешь и тебе покажется, что в тестовом движке есть проблемы.",
        "",
        "ПОЕХАЛИ!"
      ],
      "final": [
        "Поздравляю, Герой! Это был нелегкий путь, но ты это сделал!",
        "",
        "Ты можешь продолжить улучшать игру. Например, можно добавить в `formatNumber` поддержку чисел больших чем",
        "999.99T. После триллионов может идти что-то вроде `aa`, `ab`, `ac` и так далее. Помнишь лекцию о системах счисления?",
        "Можно улучшить UI, добавить новых производителей, сделать игру проще или сложнее модифицировав параметры конфига.",
        "",
        "Ты можешь связаться с нами несколькими способами.",
        "Email: welcome@coderslang.com",
        "Telegram: t.me/coderslang_ru",
        "Twitter: @coderslang",
        "",
        "С нетерпением ждем твои комментарии и предложения!"
      ],
      "stages": {
        "1": [
          "Это первая подзадача или первый этап.",
          "",
          "Ты начинаешь с пустым файлом `solution.js`.",
          "- Создай новый файл `gameEngine.js` и экспортируй из него пустую функцию `startMiningGame`.",
          "- Импортируй функцию `startMiningGame` в `solution.js`.",
          "- Вызови функцию `startMiningGame` после ее импорта в `solution.js`.",
          "",
          "Ничего не произойдет, потому что функция пустая. Так и должно быть."
        ],
        "2": [
          "Наша игра будет взаимодействовать с пользователем двумя способами. Она будет перехватывать ввод с клавиатуры и печатать сообщения в консоль.",
          "",
          "Ты уже знаком с console.log, но в этот раз я советую использовать **npm** модуль `terminal-kit`.",
          "Он предоставит нам весь функционал для общения с пользователем, плюс несколько удобных функций для очистки экрана, смены позиции ввода и цвета текста,",
          "",
          "- Для начала выполни команду `npm install --save terminal-kit` в рабочей директории задачи.",
          "- Создай новый файл `constants.js` и добавь в него строку `import terminalKit from 'terminal-kit';`, чтобы импортировать новый модуль.",
          "- После импорта создай и экспортируй новую константу: `export const term = terminalKit.terminal;`."
        ],
        "3": [
          "Итак, ты уже экспортировал константу `term`, которая даст нам контроль над терминалом.",
          "Давай воспользуемся ей!",
          "",
          "- Создай файл `functions.js` и экспортируй из него функцию `init`.",
          "- `init` должна принимать один параметр `term`.",
          "- Импортируй `init` в `gameEngine.js` и вызови ее из `startMiningGame`.",
          "- Добавь параметр `term` в функцию `startMiningGame`.",
          "- Импортируй константу `term` в `solution.js` из `constants.js`, передай ее в `startMiningGame` а потом пробрось в `init`.",
          "- Внутри `init` добавь строку `term(Welcome to the mining game!)`.",
          "",
          "В итоге, ты должен увидеть сообщение `Welcome to the mining game!` на экране.",
          "P.S. `term` должен быть импортирован ТОЛЬКО в `solution.js`."
        ],
        "4": [
          "Поздравляю с прохождением третьего этапа!",
          "Тебе может показаться, что мы сделали слишком много действий, создали 4 файла, добавили новый модуль,",
          "а в результате выводим только одну строку на экран... Это, конечно, жаль, но в итоге код будет логично структурирован,",
          "его будет просто изменять и улучшать. В будущем ты в этом убедишься.",
          "",
          "Прежде чем мы дадим возможность пользователю копать золото, нам нужно где-то его хранить.",
          "- Давай создадим объект `config` с одним полем `gold` и значением 0.",
          "- Экспортируем `config` из файла `constants.js`, импортируем в `solution.js` и передадим в `startMiningGame` вторым параметром."
        ],
        "5": [
          "Теперь, давай поработаем над функцией, которая будет использована, когда пользователь нажмет на кнопку `G` на клавиатуре.",
          "",
          "Создай и экспортируй функцию `handleKeyPress(term, state)` в файле `handlers.js`.",
          "`handleKeyPress`, должна вернуть другую функцию, другими словами замыкание.",
          "У этой функции должно быть три собственных параметра (name, matches, data).",
          "Смысл этих действий ты поймешь на следующем этапе.",
          "",
          "Нас будет интересовать только нажатая кнопка, и она будет хранится в поле `data.code`.",
          "Ты можешь использовать функцию `String.fromCharCode()` чтобы конвертировать код символа в строку.",
          "Если была нажата клавиша `G` или `g`, мы должны увеличить поле `gold` объекта `state` на 1",
          "",
          "P.S. Помни, что мы импортируем term и config только в solution.js и дальше пробрасываем их как term и state.",
          "Имена для этих внутренних параметров ты можешь выбрать любые в теории, нам важна сама структура."
        ],
        "6": [
          "Обработчик готов, теперь мы должны соединить его с событием нажатия клавиши.",
          "Но сначала улучшим функцию `init`. Она принимает один параметр и должна вызвать у него методы:",
          "- clear(), чтобы очистить экран",
          "- hideCursor(), чтобы спрятать курсор",
          "- grabInput(), чтобы обрабатывать нажатия клавиш",
          "",
          "Внутри функции `startMiningGame`, после вызова `init`, вызови функцию `term.on('event', handler)`.",
          "У этой функции два параметра. Первый - строка. Так как мы хотим перехватить нажатие на клавишу, мы выставим его равным `'key'`.",
          "",
          "Второй - это колбек функция с тремя параметрами `(name, matches, data)`. Помнишь наше замыкание?",
          "Мы только что его реализовали. Давай используем!"
        ],
        "7": [
          "Итак, мы можем копать золото нажимая на клавишу 'G'.",
          "Давай выведем результат наших действий на экран.",
          "",
          "Реализуй и экспортируй функцию `updateGold(term, state)` из `functions.js`",
          "Она должна переместить нас на координаты (25, 2), стереть остаток строки и вывести значение поля `state.gold` на экран",
          "Чтобы было красивее, используй желтый цвет, полужирный шрифт и добавь к строке вывода 3 пробела.",
          "",
          "После этого, ты можешь вызывать `updateGold` из `handleKeyPress`, чтобы обновить значение золота, когда пользователь нажимает на кнопку 'G'",
          "",
          "P.S. Тебе пригодятся функции term.moveTo(x, y), term.bold.yellow(message) и term.eraseLineAfter()"
        ],
        "8": [
          "Отлично! Ручной режим реализован, теперь можно подумать и об автоматизации.",
          "",
          "Добавь новое поле `producers` в `config`, который мы экспортируем из `solution.js`.",
          "Это должен быть массив объектов. У каждого элемента массива `producers`",
          "должны быть поля `id`, `title`, `cost`, `growthRate`, `baseProduction` и `count`.",
          "Вот пару примеров:",
          "`{ id: 1, title: 'Miner', cost: 10, growthRate: 1.13, baseProduction: 0.1, count: 0 }`",
          "`{ id: 2, title: 'Adventurer', cost: 100, growthRate: 1.17, baseProduction: 1, count: 0 }`",
          "`{ id: 3, title: 'Professional', cost: 1200, growthRate: 1.14, baseProduction: 9, count: 0 }`",
          "У каждого производителя должен быть уникальный id."
        ],
        "9": [
          "Сейчас, давай добавим возможность покупать новых производителей.",
          "Если ты создал производителей с id состоящими из одной цифры, ты все сделал правильно. Если нет, ты еще можешь это исправить.",
          "",
          "Нам нужно добавить новый функционал в функцию `handleKeyPress`.",
          "",
          "Если пользователь нажимает на клавишу, которая соответствует id производителя, мы должны:",
          "- Вычесть необходимое количество золота из хранилища.",
          "- Увеличить стоимость следующего производителя умножив его текущую стоимость на `growthRate`.",
          "- Увеличить количество производителей нужного типа."
        ],
        "10": [
          "После того, как мы купили несколько производителей, мы должны убедится, что они работают!",
          "Каждую секунду, каждый продюсер должен приносить нам количество золота равное `baseProduction`.",
          "",
          "- Добавь новое поле `productionRate` в объект `config` в файле `constants.js`.",
          "- Начальное значение `productionRate` должно быть равно 0.",
          "- Когда пользователь покупает нового производителя, мы должны увеличивать общий `productionRate`",
          "- Реализуй и экспортируй новый обработчик `handleStateChange(term, state)` в `handlers.js` который должен вызвать функцию `updateGold(term, state)`",
          "- При каждом вызове `updateGold` увеличивай значение золота на величину общего productionRate",
          "- В `startMiningGame` установи интервал, который будет вызывать `handleStateChange` раз в секунду",
          "- `handleStateChange` должен вернуть замыкание, которое и будет использоваться в `setInterval`",
          "- Удали вызов `updateGold` из `handleKeyPress`, чтобы у нас не возникло проблем с бухгалтерией"
        ],
        "11": [
          "Поздравляю, ты реализовал ядро игры!",
          "Осталось сделать несколько косметических улучшений.",
          "",
          "Для начала, мы улучшим на `config` добавив в него два флага `isInitCompleted: false` и `isProducerListUpdated: true`",
          "Они тебе понадобятся дальше."
        ],
        "12": [
          "Подготовка закончена, так что начнем по порядку.",
          "После того, как пользователь накопал достаточно золота для первой покупки, нам стоит изменить приветствие.",
          "Я предлагаю создать функцию `checkInitCompleted` которая должна быть вызвана из `handleKeyPress`, как только пользователь может купить первого производителя.",
          "",
          "Вот как функция `checkInitCompleted` должна работать:",
          "- Она должна принять проброшенные параметры `term` и `state`.",
          "- Она должна перейти на начало первой строки, стереть все символы до конца этой строки и вывести сообщение",
          "`You can purchase producers by clicking the number button (1, 2, 3, ...)`",
          "- Она должна напечатать сообщения `GOLD:` и `PRODUCTION RATE:` на строках 2 и 3 соответственно.",
          "- Она должна быть вызвана из `handleKeyPress` если у пользователя достаточно золота для покупки самого дешевого производителя.",
          "",
          "Не забудь, что смена состояния, описанная выше, должна произойти только однажды за всю игру.",
          "Даже хотя `handleKeyPress` будет вызываться столько раз, сколько будут нажаты кнопки на клавиатуре, `checkInitCompleted` мы должны вызывать только один раз."
        ],
        "13": [
          "Дальше, мы улучшим UX с помощью отображения текущего списка производителей.",
          "Реализуй функцию `updateProducerList(term, state)` в `functions.js`",
          "",
          "- Она должна вывести список производителей на экран, каждый с новой строки, начиная на строке 5.",
          "- Она должна выводить только тех производителей у который `count > 0`, плюс одного производителя с `count = 0`, чтобы показать пользователю его следующую цель.",
          "- Формат вывода должен быть таким: ",
          "`Miner: 2 | Production per second: 0.1 | Cost: 12.8`",
          "`Adventurer: 0 | Production per second: 1.0 | Cost: 100`",
          "- Золото в секунду и стоимость должны быть округлены до одного символа после запятой.",
          "",
          "Функция `updateProducerList` должна быть вызвана из `handleKeyPress` каждый раз, когда это необходимо.",
          "Например, мы сменили приветственное сообщение с помощью `checkInitCompleted` или купили нового производителя."
        ],
        "14": [
          "Ух ты! Предыдущий этап должен был быть сложным, но ты сделал это!",
          "У нас осталось еще немного работы, но ты справляешься отлично!",
          "",
          "Для пользователя было бы очень удобно видеть текущую производительность его золотодобывающей империи.",
          "Давай выведем эту информацию зеленым цветом на третьей строке экрана используя `term.green()`. Прямо под текущим значением золота.",
          "Так как производительность может измениться только после покупки, ты должен добавить новый код в `handleKeyPress`"
        ],
        "15": [
          "Ты мог заметить, что у нас иногда возникают проблемы с отображением чисел в нашей игре.",
          "Иногда, у чисел появляются длинные хвосты после запятой.",
          "А бывает, что числа становятся настолько большими, что сложно понять, миллионы это или миллиарды.",
          "",
          "Давай реализуем функцию `formatNumber(n)` в `functions.js`, которая примет число и вернет строку с его улучшенной версией.",
          "Вот как она должна работать: ",
          "- Если `n < 1000`, число должно быть округлено до первого знака после запятой",
          "- Иначе, чтобы сократить длину строки, мы используем буквы 'K', 'M', 'B', 'T' чтобы описать",
          "тысячи, миллионы, миллиарды или триллионы. Точность нам не слишком важна, поэтому мы также используем округление.",
          "В этот раз, до двух знаков после запятой.",
          "Примеры: 12352.1 => 12.35K, 1234321 => 1.23M, 12343210000000 => 12.34T",
          "",
          "Обязательно измени с помощью `formatNumber` значения GOLD и PRODUCTION RATE, которые мы выводим на экран.",
          "По желанию, ты можешь применить этот подход и к числам в списке производителей."
        ],
        "16": [
          "Сейчас, мы обновляем UI раз в секунду. Это нормально, но игра смотрелась бы лучше, если бы обновление было чаще.",
          "Например, в 10 раз.",
          "",
          "Ты должен будешь внести изменения в нескольких местах.",
          "Давай добавим поле `tickSpeed` в наш `config`, чтобы можно было легко изменить частоту обновлений с помощью этого поля.",
          "",
          "Начни с передачи `tickSpeed` вторым параметром в `setInterval` и подумай что нужно сделать дальше.",
          "Помни, что ты также должен будешь учитывать `tickSpeed` при подсчете общей производительности."
        ]
      }
    }
  }
}