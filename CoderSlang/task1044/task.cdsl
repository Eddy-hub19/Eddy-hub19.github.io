{
  "jsLectureId": 104,
  "reward": 10,
  "tutors": [
    "Technic"
  ],
  "entryPoint": "index.js",
  "i18n": {
    "en": {
      "title": "Configurable logger middleware",
      "description": [
        "We're going to implement a configurable logger.",
        "You'll be able to add or remove logging options based on your current needs.",
        "",
        "Here are a couple of requirements that are expected of our new logger:",
        "- It should return a closure that could be used as a middleware.",
        "- It should serve a single purpose - log all incoming requests to the console.",
        "- The format of the logs should be configurable by the config string passed accepted as a parameter",
        "",
        "Configuration details:",
        "- The config string can include any of the substrings `:date`, `:method` or `:url`.",
        "- These are the config options which should be split by space, i.e. `:date :method` or `:date :url`",
        "- For each known option you should include extra information into the `console.log`",
        "- Date should be printed out as a result of the function `getFormattedDate`",
        "- `method` and `url` should be picked from the function object `req`"
      ],
      "final": [
        "Congratulations, you've developed your own configurable logger!",
        "If you think it was very easy, take a look at the package [morgan](https://www.npmjs.com/package/morgan).",
        "It's essentially the same as you just did, and it's used by millions of users!",
        "",
        "Maybe you can add a couple of tweaks to the logger you've just created and publish on `npm` as well?"
      ],
      "stages": {
        "1": [
          "You'll start by exporting a function `logger` from the file `middleware.js`.",
          "As we want to make it configurable, it shouldn't be just a plain middleware handler",
          "Instead, it should return one!",
          "",
          "If you're not really sure what I just said, then I suggest going over the lecture on `Advanced Functions` once again.",
          "And if you just need a hint, then make sure that logger returns a function that can be used as a middleware and calls `next()` in the end of its execution"
        ],
        "2": [
          "Cool, so `logger` returns a middleware function, but it doesn't do much yet.",
          "Let's improve its behavior: ",
          "- log current date, request method and url for each incoming request using `console.log`",
          "- this data should be printed as a single line where each piece of information is split by a single space (' ')",
          "- Date should be printed out as a result of the function `getFormattedDate`",
          "- `method` and `url` should be picked from the function object `req`"
        ],
        "3": [
          "Time to make our `logger` configurable.",
          "- Add the parameter `configString` to the `logger` function",
          "- The config string can include any of the substrings `:date`, `:method` or `:url`.",
          "- These are the config options which should be split by space, i.e. `:date :method` or `:date :url`",
          "- For each known option you should include extra information into the `console.log`",
          "- Unknown options should be ignored"
        ],
        "4": [
          "The configurable logger is ready!",
          "Add it as a middleware to the server, spin it up and try a couple requests in the browser.",
          "Examples: `localhost:8080`, `localhost:8080/about`."
        ]
      }
    },
    "ru": {
      "title": "Конфигурируемый логгер",
      "description": [
        "Реализуй функцию `logRequestTimestamp` и используй ее как middleware.",
        "",
        "Функция `logRequestTimestamp` должна выводить на экран текущую дату и время в формате UTC, например `Mon, 23 Nov 3027 10:15:26 GMT`.",
        "Текущую дату и время ты можешь получить с помощью функции `getFormattedDate` из `functions.js`."
      ],
      "final": [
        "Поздравляю, ты разработал свой собственный конфигурируемый логгер!",
        "Если тебе показалось, что это было очень просто, то посмотри на [morgan](https://www.npmjs.com/package/morgan).",
        "По сути, это то же, что сделал ты, но его используют миллионы пользователей!",
        "",
        "Может ты придумаешь несколько улучшений и опубликуешь свой логгер в `npm` тоже?"
      ],
      "stages": {
        "1": [
          "Мы начнем с создания и экспорта функции `logger` из файла `middleware.js`.",
          "Так как мы хотим сделать его гибким, `logger` не должен быть просто middleware функцией.",
          "Вместо этого, он должен вернуть ее!",
          "",
          "Если ты не уверен, что понимаешь меня, советую пройти еще раз лекцию `Продвинутые функции`.",
          "А если тебе просто нужна подсказка, то убедись, что логгер возвращает функцию, которую можно использовать как middleware.",
          "И не забудь вызывать `next()` в конце выполнения"
        ],
        "2": [
          "Круто, `logger` возвращает middleware функцию, но она пока не делает ничего полезного.",
          "Давай улучшим поведение: ",
          "- выводи на экран текущую дату, тип запроса и маршрут используя `console.log`",
          "- эти данные должны быть выведены на одной строке и разделены пробелами (' ')",
          "- Дата должна быть получена с помощью функции `getFormattedDate`",
          "- Тип запроса и маршрут, ты можешь получить как `method` и `url` из объекта `req`"
        ],
        "3": [
          "Пора сделать наш `logger` конфигурируемым.",
          "- Добавь параметр `configString` к функции `logger`",
          "- Строка конфигурации может включать подстроки `:date`, `:method` или `:url`.",
          "- Это параметры конфигурации, которые должны быть разделены пробелами `:date :method` or `:date :url`",
          "- Для каждого известного параметра ты должен добавить новую информацию в `console.log`",
          "- Неизвестные параметры должны игнорироваться"
        ],
        "4": [
          "Конфигурируемый логгер готов!",
          "Добавь его как серверное middleware, запусти сервер и сделай несколько запросов в браузере.",
          "Примеры: `localhost:8080`, `localhost:8080/about`."
        ]
      }
    }
  }
}